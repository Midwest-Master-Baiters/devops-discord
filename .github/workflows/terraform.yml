# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: 'Terraform'

on:
  push:
  pull_request:

env:
  TF_VAR_discord_token: "${{ secrets.DISCORD_API_TOKEN }}"

permissions:
  contents: read

jobs:
  test:
    name: 'Test'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: "./tf"
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: "./tf"
        run: terraform fmt -check --diff --recursive

  build:
    name: 'Build'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: "./tf"
        run: terraform init

      - name: Terraform Plan
        working-directory: "./tf"
        run: terraform plan -input=false -lock=true -out=plan.out

      - name: Show Plan
        working-directory: "./tf"
        run: terraform show plan.out

      - name: Archive plan
        uses: actions/upload-artifact@v4
        with:
          name: plan.out
          path: ./tf/plan.out


  deploy:
    name: 'Deploy'
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: "./tf"
        run: terraform init

      - name: Deploy plan
        uses: actions/download-artifact@v4
        with:
          name: plan.out

      - name: Terraform Apply
        working-directory: "./tf"
        run: terraform apply -auto-approve -input=false -lock=true plan.out
